{"version":3,"sources":["modules/citiesModule/actions.js","modules/defaultCityModule/actions.js","modules/forecast5DaysModule/actions.js","api/Api.js","components/NavMenu.jsx","api/CityInfo.js","modules/forecast5DaysModule/reselect.js","components/ForecastCity.jsx","helpers/weatherImage.js","helpers/humanTime.js","components/SingleCity.jsx","components/defaultCity.jsx","pages/CitiesContainer.jsx","App.js","modules/citiesModule/reducer.js","modules/forecast5DaysModule/reducer.js","modules/defaultCityModule/reducer.js","redux/store.js","index.js"],"names":["actionTypes","addToFavorite","city","type","payload","removeFromFavorite","this","myValue","serverApi","client","axios","create","baseURL","params","APPID","NavMenu","memo","useState","searchCity","setSearchCity","dispatch","useDispatch","search","useCallback","e","target","value","searchNewCity","name","preventDefault","a","Api","get","then","data","searchedCity","catch","message","error","Navbar","bg","variant","Brand","Form","inline","onSubmit","FormControl","placeholder","className","onChange","Button","weatherData","createSelector","state","forecastCity","forecast5city","list","items","map","item","dt_txt","temp","main","toFixed","ForecastCity","useSelector","isRequestInProgress","Spinner","animation","Col","md","ResponsiveContainer","width","aspect","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Line","stroke","activeDot","r","getWeatherImage","getHumanTime","date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","SingleCity","props","canRemove","sys","country","sunrise","sunset","wind","coord","id","weather","dateSunRise","useMemo","Date","dateSunSet","todayIs","toLocaleDateString","sunRise","sunSet","removeFavorite","addFavorite","getForecast","getForecastCity","Object","keys","length","src","icon","alt","style","textAlign","description","Table","striped","bordered","hover","humidity","deg","speed","lat","lon","onClick","DefaultCity","myCity","defaultCity","cities","savedCities","findIndex","el","getDirection","direction","CitiesContainer","lng","setLng","setLat","setDefaultCity","isAdded","setIsAdded","displayLocationInfo","position","coords","longitude","latitude","useEffect","navigator","geolocation","getCurrentPosition","getDefaultCity","Container","fluid","Row","Alert","arr","index","setTimeout","App","defaultState","CitiesReducer","filter","c","Forecast5DaysReducer","defaultCityReducer","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistConfig","key","storage","rootReducer","combineReducers","persistedReducer","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.8e7a43d0.chunk.js","sourcesContent":["export const actionTypes = {\r\n  SEARCH_CITY_REQ_START: 'SEARCH_CITY_REQ_START',\r\n  SEARCH_CITY_REQ_SUCCESS: 'SEARCH_CITY_REQ_SUCCESS',\r\n  SEARCH_CITY_REQ_ERROR: 'SEARCH_CITY_REQ_ERROR',\r\n  ADD_TO_FAVORITE: 'ADD_TO_FAVORITE',\r\n  REMOVE_FROM_FAVORITE: 'REMOVE_FROM_FAVORITE',\r\n};\r\n\r\nexport const requestSearchCity = () => ({\r\n  type: actionTypes.SEARCH_CITY_REQ_START,\r\n});\r\n\r\nexport const requestSearchCitySuccess = (searchedCity) => ({\r\n  type: actionTypes.SEARCH_CITY_REQ_SUCCESS,\r\n  payload: {\r\n    searchedCity,\r\n  },\r\n});\r\nexport const requestSearchCityError = (error) => ({\r\n  type: actionTypes.SEARCH_CITY_REQ_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\nexport const addToFavorite = (city) => ({\r\n  type: actionTypes.ADD_TO_FAVORITE,\r\n  payload: {\r\n    city,\r\n  },\r\n});\r\nexport const removeFromFavorite = (city) => ({\r\n  type: actionTypes.REMOVE_FROM_FAVORITE,\r\n  payload: {\r\n    city,\r\n  },\r\n});\r\n","export const actionTypes = {\r\n  GET_DEFAULT_CITY_COORDS_REQ_START: 'GET_DEFAULT_CITY_COORDS_REQ_START',\r\n  GET_DEFAULT_CITY_COORDS_REQ_SUCCESS: 'GET_DEFAULT_CITY_COORDS_REQ_SUCCESS',\r\n  GET_DEFAULT_CITY_COORDS_REQ_ERROR: 'GET_DEFAULT_CITY_COORDS_REQ_ERROR',\r\n};\r\n\r\nexport const requestDefaultCity = () => ({\r\n  type: actionTypes.GET_DEFAULT_CITY_COORDS_REQ_START,\r\n});\r\n\r\nexport const requestDefaultCitySuccess = (defaultCity) => ({\r\n  type: actionTypes.GET_DEFAULT_CITY_COORDS_REQ_SUCCESS,\r\n  payload: {\r\n    defaultCity,\r\n  },\r\n});\r\nexport const requestDefaultCityError = (error) => ({\r\n  type: actionTypes.GET_DEFAULT_CITY_COORDS_REQ_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\n","export const actionTypes = {\r\n  FORECAST_FIVEDAYS_REQ_START: 'FORECAST_FIVEDAYS_REQ_START',\r\n  FORECAST_FIVEDAYS_REQ_SUCCESS: 'FORECAST_FIVEDAYS_REQ_SUCCESS',\r\n  FORECAST_FIVEDAYS_REQ_ERROR: 'FORECAST_FIVEDAYS_REQ_ERROR',\r\n};\r\n\r\nexport const requestForecast5City = () => ({\r\n  type: actionTypes.FORECAST_FIVEDAYS_REQ_START,\r\n});\r\n\r\nexport const requestForecast5CitySuccess = (forecast5city) => ({\r\n  type: actionTypes.FORECAST_FIVEDAYS_REQ_SUCCESS,\r\n  payload: {\r\n    forecast5city,\r\n  },\r\n});\r\nexport const requestForecast5CityError = (error) => ({\r\n  type: actionTypes.FORECAST_FIVEDAYS_REQ_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\n","import axios from 'axios';\n\nclass Api {\n  constructor() {\n    this.myValue = '3476f426c6d8f97027e143c1f5b3b21e';\n    this.serverApi = 'https://api.openweathermap.org/data/2.5';\n    this.client = axios.create({\n      baseURL: this.serverApi,\n      params: { APPID: this.myValue },\n    });\n  }\n}\n\nexport default new Api();\n","import React, { memo, useCallback, useState } from 'react';\nimport { Button, Form, FormControl, Navbar } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { getSearchedCity } from 'api/CityInfo';\n\nconst NavMenu = memo(() => {\n  const [searchCity, setSearchCity] = useState('');\n  const dispatch = useDispatch();\n\n  const search = useCallback((e) => setSearchCity(e.target.value), []);\n\n  const searchNewCity = useCallback(\n    (e) => {\n      e.preventDefault();\n      dispatch(getSearchedCity(searchCity));\n      setSearchCity('');\n    },\n    [dispatch, searchCity]\n  );\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand>My weather app</Navbar.Brand>\n      <Form inline onSubmit={searchNewCity}>\n        <FormControl\n          type=\"text\"\n          placeholder=\"Search city by name\"\n          className=\"mr-sm-2\"\n          onChange={search}\n          value={searchCity}\n        />\n        <Button type=\"submit\" variant=\"success\">\n          Search\n        </Button>\n      </Form>\n    </Navbar>\n  );\n});\n\nexport default NavMenu;\n","import { requestSearchCity, requestSearchCityError, requestSearchCitySuccess } from 'modules/citiesModule/actions';\nimport {\n  requestDefaultCity,\n  requestDefaultCityError,\n  requestDefaultCitySuccess,\n} from 'modules/defaultCityModule/actions';\nimport {\n  requestForecast5City,\n  requestForecast5CityError,\n  requestForecast5CitySuccess,\n} from 'modules/forecast5DaysModule/actions';\n\nimport Api from './Api';\n\nexport const getDefaultCity = (lat, lng) => async (dispatch) => {\n  dispatch(requestDefaultCity());\n  await Api.client\n    .get(`/weather?lat=${lat}&lon=${lng}`)\n    .then(({ data }) => {\n      dispatch(requestDefaultCitySuccess(data));\n    })\n    .catch(({ message }) => {\n      dispatch(requestDefaultCityError(message));\n    });\n};\n\nexport const getSearchedCity = (name) => async (dispatch) => {\n  dispatch(requestSearchCity());\n  await Api.client\n    .get(`/weather?q=${name}`)\n    .then(({ data }) => {\n      dispatch(requestSearchCitySuccess(data));\n    })\n    .catch(({ message }) => dispatch(requestSearchCityError(message)));\n};\n\nexport const getForecastCity = (id) => async (dispatch) => {\n  if (!id) return;\n  dispatch(requestForecast5City());\n  await Api.client\n    .get(`/forecast?id=${id}`)\n    .then(({ data }) => {\n      dispatch(requestForecast5CitySuccess(data));\n    })\n    .catch(({ message }) => dispatch(requestForecast5CityError(message)));\n};\n","import { createSelector } from 'reselect';\r\n\r\nconst list = (state) => state.forecastCity?.forecast5city?.list;\r\n\r\nexport const weatherData = createSelector(list, (items) =>\r\n  items.map((item) => ({\r\n    name: item.dt_txt,\r\n    temp: (item.main.temp - 273.15).toFixed(0),\r\n  }))\r\n);\r\n","import React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { Spinner, Col } from 'react-bootstrap';\nimport { weatherData } from 'modules/forecast5DaysModule/reselect';\n\nconst ForecastCity = memo(() => {\n  const forecast5city = useSelector((state) => state.forecastCity.forecast5city);\n  const state = useSelector((state) => state);\n  const isRequestInProgress = useSelector((state) => state.forecastCity.isRequestInProgress);\n  const data = weatherData(state);\n\n  if (isRequestInProgress) return <Spinner animation=\"grow\" />;\n\n  if (!forecast5city) return null;\n\n  return (\n    <Col md={12}>\n      <h2>Forecast for 5 day for city {forecast5city.city.name}</h2>\n      <ResponsiveContainer width=\"100%\" aspect={2.5} height=\"300px\">\n        <LineChart\n          width={1500}\n          height={300}\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          {/* <Legend /> */}\n          <Line type=\"monotone\" dataKey=\"temp\" stroke=\"red\" activeDot={{ r: 5 }} />\n        </LineChart>\n      </ResponsiveContainer>\n    </Col>\n  );\n});\n\nexport default ForecastCity;\n","const getWeatherImage = (name) => `https://openweathermap.org/img/w/${name}.png`;\r\n\r\nexport default getWeatherImage;\r\n","const getHumanTime = (date) => {\r\n  const hours = date.getHours();\r\n  const minutes = '0' + date.getMinutes();\r\n  const seconds = '0' + date.getSeconds();\r\n  return hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n};\r\n\r\nexport default getHumanTime;\r\n","import React, { Fragment, memo, useCallback, useMemo } from 'react';\nimport { Button, Spinner, Table } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport getWeatherImage from 'helpers/weatherImage';\nimport getHumanTime from 'helpers/humanTime';\nimport { removeFromFavorite } from 'modules/citiesModule/actions';\nimport { getForecastCity } from 'api/CityInfo';\n\nconst SingleCity = memo((props) => {\n  const { city, addToFavorite, canRemove } = props;\n\n  const dispatch = useDispatch();\n\n  const {\n    sys: { country, sunrise, sunset },\n    main,\n    wind,\n    coord,\n    id,\n    weather,\n    name,\n  } = city;\n\n  const dateSunRise = useMemo(() => new Date(sunrise * 1000), [sunrise]);\n  const dateSunSet = useMemo(() => new Date(sunset * 1000), [sunset]);\n  const todayIs = useMemo(() => new Date().toLocaleDateString(), []);\n\n  const sunRise = useMemo(() => getHumanTime(dateSunRise), [dateSunRise]);\n  const sunSet = useMemo(() => getHumanTime(dateSunSet), [dateSunSet]);\n\n  const removeFavorite = useCallback(() => dispatch(removeFromFavorite(city)), [dispatch, city, removeFromFavorite]);\n\n  const addFavorite = useCallback(() => addToFavorite(city), [city, addToFavorite]);\n\n  const getForecast = useCallback(() => dispatch(getForecastCity(id)), [id]);\n\n  if (city && Object.keys(city).length) {\n    return (\n      <div className=\"single\">\n        <h2>{name}</h2>\n        <img src={getWeatherImage(weather[0].icon)} alt=\"weather\" />\n        <p style={{ textAlign: 'center' }}>{weather[0].description}</p>\n        <Table striped bordered hover>\n          <tbody>\n            <tr>\n              <td>t&deg; </td>\n              <td>{(main.temp - 273.15).toFixed(0)}&#8451;</td>\n            </tr>\n            <tr>\n              <td>Country:</td>\n              <td>{country}</td>\n            </tr>\n            <tr>\n              <td>Today is:</td>\n              <td>{todayIs}</td>\n            </tr>\n            <tr>\n              <td>Sunrise:</td>\n              <td>{sunRise}</td>\n            </tr>\n            <tr>\n              <td>Sunset:</td>\n              <td>{sunSet}</td>\n            </tr>\n            <tr>\n              <td>Humidity:</td>\n              <td>{main.humidity}%</td>\n            </tr>\n            <tr>\n              <td>Wind:</td>\n              <td>\n                {wind.deg ? (\n                  <Fragment>\n                    direction:&nbsp;\n                    {wind.deg < 90 ? <span>North-East</span> : null}\n                    {wind.deg >= 90 && wind.deg < 180 ? <span>South-East</span> : null}\n                    {wind.deg >= 180 && wind.deg < 270 ? <span>South-West</span> : null}\n                    {wind.deg >= 270 && wind.deg < 360 ? <span>North-West</span> : null}, <br />\n                  </Fragment>\n                ) : null}\n                speed: {wind.speed} m/s\n              </td>\n            </tr>\n            <tr>\n              <td>Coordinates:</td>\n              <td>\n                {coord.lat} {coord.lon}\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n\n        <Button onClick={getForecast} variant=\"dark\" className=\"mb-3\">\n          Forecast for 5 days\n        </Button>\n\n        {canRemove ? (\n          <Button variant=\"danger\" onClick={removeFavorite} className=\"mb-3\">\n            Remove from favorite\n          </Button>\n        ) : (\n          <Button onClick={addFavorite} className=\"mb-3\">\n            Add to favorite\n          </Button>\n        )}\n      </div>\n    );\n  }\n  return <Spinner animation=\"grow\" />;\n});\n\nexport default SingleCity;\n","import React, { memo, useCallback, useMemo } from 'react';\nimport { Button, Spinner } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport getWeatherImage from 'helpers/weatherImage';\nimport getHumanTime from 'helpers/humanTime';\nimport { addToFavorite, removeFromFavorite } from 'modules/citiesModule/actions';\n\nconst DefaultCity = memo(() => {\n  const dispatch = useDispatch();\n\n  const myCity = useSelector((state) => state.defaultCity.defaultCity);\n  const cities = useSelector((state) => state.savedCities.cities);\n\n  const {\n    sys: { country, sunrise, sunset },\n    main,\n    wind,\n    coord,\n    weather,\n    name,\n    id,\n  } = myCity;\n\n  const dateSunRise = useMemo(() => new Date(sunrise * 1000), [sunrise]);\n  const dateSunSet = useMemo(() => new Date(sunset * 1000), [sunset]);\n  const todayIs = useMemo(() => new Date().toLocaleDateString(), []);\n\n  const sunRise = useMemo(() => getHumanTime(dateSunRise), [dateSunRise]);\n  const sunSet = useMemo(() => getHumanTime(dateSunSet), [dateSunSet]);\n\n  const removeFavorite = useCallback(() => dispatch(removeFromFavorite(myCity)), [dispatch, myCity]);\n\n  const canRemove = useMemo(() => cities.findIndex((el) => el.id === id) > 0, [cities, id]);\n\n  const addFavorite = useCallback(() => {\n    if (cities.findIndex((el) => el.id === id) > 0) return;\n    dispatch(addToFavorite(myCity));\n  }, [cities, dispatch, myCity, id]);\n\n  const getDirection = useCallback((direction) => {\n    switch (true) {\n      case direction < 90:\n        return 'North-East';\n      case direction >= 90 && direction < 180:\n        return 'South-East';\n      case direction >= 180 && direction < 270:\n        return 'South-West';\n      case direction >= 270 && direction < 360:\n        return 'North-West';\n      default:\n        return 'Checking';\n    }\n  }, []);\n\n  if (!myCity) return <Spinner animation=\"grow\" />;\n  return (\n    <div className=\"my-city\">\n      <h2>Weather in your city: {name}</h2>\n      <img src={getWeatherImage(weather[0].icon)} alt=\"weather\" />\n      <p style={{ textAlign: 'center' }}>{weather[0].description}</p>\n      <div className=\"my-city--row my-city--row__name\">\n        <span>t&deg;</span>\n        <span>Country:</span>\n        <span>Today is:</span>\n        <span>Sunrise:</span>\n        <span>Sunset:</span>\n        <span>Humidity:</span>\n        <span>Wind:</span>\n        <span>Coordinates:</span>\n      </div>\n      <div className=\"my-city--row my-city--row__details\">\n        <span>{(main.temp - 273.15).toFixed(0)}&#8451;</span>\n        <span>{country}</span>\n        <span>{todayIs}</span>\n        <span>{sunRise}</span>\n        <span>{sunSet}</span>\n        <span>{main.humidity}%</span>\n        <span>\n          {getDirection(wind.deg)}\n          <br />\n          speed: {wind.speed} m/s\n        </span>\n\n        <span>\n          {coord.lat} {coord.lon}\n        </span>\n      </div>\n      <Button variant=\"dark\" className=\"mb-3 mt-3\">\n        Forecast for 5 days\n      </Button>\n      {canRemove ? (\n        <Button variant=\"danger\" onClick={removeFavorite}>\n          Remove from favorite\n        </Button>\n      ) : (\n        <Button onClick={addFavorite}>Add to favorite</Button>\n      )}\n    </div>\n  );\n});\n\nexport default DefaultCity;\n","import React, { useState, useEffect, memo, Fragment, useCallback } from 'react';\nimport { Container, Row, Alert, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getDefaultCity } from 'api/CityInfo';\n\nimport ForecastCity from 'components/ForecastCity';\nimport SingleCity from 'components/SingleCity';\nimport DefaultCity from 'components/defaultCity';\nimport { addToFavorite } from 'modules/citiesModule/actions';\n\nconst CitiesContainer = memo(() => {\n  const [lng, setLng] = useState('');\n  const [lat, setLat] = useState('');\n  const [defaultCity, setDefaultCity] = useState(null);\n  const [isAdded, setIsAdded] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const myCity = useSelector((state) => state.defaultCity.defaultCity);\n\n  const error = useSelector((state) => state.savedCities.error);\n  const searchedCity = useSelector((state) => state.savedCities.searchedCity);\n  const cities = useSelector((state) => state.savedCities.cities);\n\n  const displayLocationInfo = useCallback((position) => {\n    setLng(position.coords.longitude.toFixed(2));\n    setLat(position.coords.latitude.toFixed(2));\n  }, []);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(displayLocationInfo);\n  }, [displayLocationInfo]);\n\n  useEffect(() => {\n    if (lat && lng && !defaultCity) {\n      dispatch(getDefaultCity(lat, lng));\n      setDefaultCity(myCity);\n    }\n  }, [defaultCity, dispatch, lat, lng, myCity]);\n\n  const pushToArray = (city) => {\n    let arr = cities;\n    const index = arr.findIndex((e) => e.id === city.id);\n    if (index === -1) {\n      dispatch(addToFavorite(city));\n    } else {\n      arr[index] = city;\n      setIsAdded(true);\n      setTimeout(() => {\n        setIsAdded(false);\n      }, 4000);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Container fluid>\n        <Row>\n          {isAdded && <Alert variant=\"success\">This city has been already added to favorite!</Alert>}\n          {error && (\n            <Alert variant=\"danger\">\n              {error === 'Request failed with status code 401' && <span>Bad access key.</span>}\n              {error === 'Request failed with status code 404' && <span>Error, wrong city code using saved data.</span>}\n              {error === 'Request failed with status code 429' && (\n                <span>You are using free tariff, try again in one minute.</span>\n              )}\n            </Alert>\n          )}\n        </Row>\n        {myCity && (\n          <Row>\n            <Col>\n              <DefaultCity />\n            </Col>\n          </Row>\n        )}\n      </Container>\n\n      <Container>\n        <Row>\n          {searchedCity && (\n            <Col>\n              <h2>Searched city</h2>\n              <SingleCity city={searchedCity} addToFavorite={pushToArray} />\n            </Col>\n          )}\n        </Row>\n\n        {cities.length > 0 && (\n          <Row>\n            <Col md={12}>\n              <h2>Favorite cities</h2>\n            </Col>\n            <div className=\"cities-list\">\n              {cities.map((city) => (\n                <Col md={4} key={city.id}>\n                  <SingleCity city={city} canRemove />\n                </Col>\n              ))}\n            </div>\n          </Row>\n        )}\n\n        <ForecastCity />\n      </Container>\n    </Fragment>\n  );\n});\n\nexport default CitiesContainer;\n","import React, { Fragment } from 'react';\nimport NavMenu from 'components/NavMenu';\nimport CitiesContainer from 'pages/CitiesContainer';\n\nconst App = () => {\n  return (\n    <Fragment>\n      <NavMenu />\n      <CitiesContainer />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import { actionTypes } from './actions';\r\n\r\nconst defaultState = {\r\n  isRequestInProgress: false,\r\n  error: false,\r\n  cities: [],\r\n};\r\n\r\nconst CitiesReducer = (state = defaultState, { type = '', payload = {} }) => {\r\n  const { searchedCity, error, city, forecast5city } = payload;\r\n  switch (type) {\r\n    case actionTypes.SEARCH_CITY_REQ_START:\r\n      return {\r\n        ...state,\r\n        error: '',\r\n        isRequestInProgress: true,\r\n      };\r\n    case actionTypes.SEARCH_CITY_REQ_SUCCESS:\r\n      return {\r\n        ...state,\r\n        searchedCity,\r\n        isRequestInProgress: false,\r\n      };\r\n    case actionTypes.SEARCH_CITY_REQ_ERROR:\r\n      return {\r\n        ...state,\r\n        error,\r\n        isRequestInProgress: false,\r\n      };\r\n    case actionTypes.ADD_TO_FAVORITE:\r\n      return {\r\n        ...state,\r\n        cities: [...state.cities, city],\r\n      };\r\n    case actionTypes.REMOVE_FROM_FAVORITE:\r\n      return {\r\n        ...state,\r\n        cities: state.cities.filter((c) => c.id !== city.id),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default CitiesReducer;\r\n","import { actionTypes } from './actions';\r\n\r\nconst defaultState = {\r\n  isRequestInProgress: false,\r\n  error: false,\r\n  forecast5city: null,\r\n};\r\n\r\nconst Forecast5DaysReducer = (state = defaultState, { type = '', payload = {} }) => {\r\n  const { error, forecast5city } = payload;\r\n  switch (type) {\r\n    case actionTypes.FORECAST_FIVEDAYS_REQ_START:\r\n      return {\r\n        ...state,\r\n        error: '',\r\n        isRequestInProgress: true,\r\n      };\r\n    case actionTypes.FORECAST_FIVEDAYS_REQ_SUCCESS:\r\n      return {\r\n        ...state,\r\n        forecast5city,\r\n        isRequestInProgress: false,\r\n      };\r\n    case actionTypes.FORECAST_FIVEDAYS_REQ_ERROR:\r\n      return {\r\n        ...state,\r\n        error,\r\n        isRequestInProgress: false,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default Forecast5DaysReducer;\r\n","import { actionTypes } from './actions';\r\n\r\nconst defaultState = {\r\n  isRequestInProgress: false,\r\n  error: false,\r\n  defaultCity: null,\r\n};\r\n\r\nconst defaultCityReducer = (state = defaultState, { type = '', payload = {} }) => {\r\n  const { defaultCity, error } = payload;\r\n  switch (type) {\r\n    case actionTypes.GET_DEFAULT_CITY_COORDS_REQ_START:\r\n      return {\r\n        ...state,\r\n        error: '',\r\n        searchedCity: null,\r\n        isRequestInProgress: true,\r\n      };\r\n    case actionTypes.GET_DEFAULT_CITY_COORDS_REQ_SUCCESS:\r\n      return {\r\n        ...state,\r\n        defaultCity,\r\n        isRequestInProgress: false,\r\n      };\r\n    case actionTypes.GET_DEFAULT_CITY_COORDS_REQ_ERROR:\r\n      return {\r\n        ...state,\r\n        error,\r\n        isRequestInProgress: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default defaultCityReducer;\r\n","import { createStore, compose, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport CitiesReducer from 'modules/citiesModule/reducer';\nimport Forecast5DaysReducer from 'modules/forecast5DaysModule/reducer';\nimport defaultCityReducer from 'modules/defaultCityModule/reducer';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nconst rootReducer = combineReducers({\n  savedCities: CitiesReducer,\n  defaultCity: defaultCityReducer,\n  forecastCity: Forecast5DaysReducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(persistedReducer, composeEnhancer(applyMiddleware(thunk)));\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}